// <auto-generated />
using System;
using IdealTimeTracker.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdealTImeTracker.API.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20240619155142_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IdealTimeTracker.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReportingTo")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportingTo");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            IsActive = true,
                            Name = "Admin User",
                            PasswordHash = new byte[] { 44, 215, 222, 75, 218, 181, 206, 164, 172, 188, 227, 43, 60, 168, 91, 110, 211, 175, 237, 193, 14, 101, 194, 235, 3, 3, 49, 168, 44, 175, 101, 45 },
                            PasswordKey = new byte[] { 173, 48, 62, 134, 228, 89, 17, 16, 167, 96, 69, 118, 52, 164, 118, 64, 80, 207, 171, 37, 172, 255, 102, 13, 245, 233, 19, 141, 30, 243, 168, 208, 166, 89, 119, 246, 220, 250, 104, 165, 46, 170, 217, 172, 184, 147, 251, 185, 13, 52, 193, 199, 140, 194, 12, 144, 249, 201, 190, 3, 62, 210, 69, 71 },
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("IdealTimeTracker.API.Models.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountPerDay")
                        .HasColumnType("int");

                    b.Property<int>("DurationInMins")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activity = "none",
                            DurationInMins = 0,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Activity = "login",
                            DurationInMins = 0,
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Activity = "logout",
                            DurationInMins = 0,
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            Activity = "Power Cut",
                            DurationInMins = 0,
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            Activity = "tea break",
                            CountPerDay = 2,
                            DurationInMins = 15,
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            Activity = "lunch break",
                            CountPerDay = 2,
                            DurationInMins = 30,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("IdealTimeTracker.API.Models.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmpId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("IdealTimeTracker.API.Models.User", b =>
                {
                    b.HasOne("IdealTimeTracker.API.Models.User", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingTo");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("IdealTimeTracker.API.Models.UserLog", b =>
                {
                    b.HasOne("IdealTimeTracker.API.Models.UserActivity", "UserActivity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("IdealTimeTracker.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserActivity");
                });
#pragma warning restore 612, 618
        }
    }
}
